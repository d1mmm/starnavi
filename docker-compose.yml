version: '3.8'

services:
  app:
    container_name: starnavi_server
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      STARNAVI_AI_ID: ${STARNAVI_AI_ID}
      STARNAVI_DB_URL: ${STARNAVI_DB_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_BACKEND_URL: ${CELERY_BACKEND_URL}
    volumes:
      - ${CREDENTIALS_AI}:/app/service_account_key.json
    depends_on:
      - db
      - redis
      - alembic
    profiles:
      - app

  alembic:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      STARNAVI_DB_URL: ${STARNAVI_DB_URL}
      POSTGRES_DB: starnavi
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - db
    command: python3 scripts/run_alembic.py upgrade head
    profiles:
      - app

  db:
    image: postgres:13
    restart: always
    environment:
      STARNAVI_DB_URL: ${STARNAVI_DB_URL}
      POSTGRES_DB: starnavi
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5431:5432"
    profiles:
      - app

  redis:
    image: redis:latest
    ports:
      - "6378:6379"
    profiles:
      - app
      - tests

  celery_app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      STARNAVI_AI_ID: ${STARNAVI_AI_ID}
      STARNAVI_DB_URL: ${STARNAVI_DB_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_BACKEND_URL: ${CELERY_BACKEND_URL}
    volumes:
      - ${CREDENTIALS_AI}:/app/service_account_key.json
    depends_on:
      - redis
      - db
    command: python3 celery_app/app.py
    profiles:
      - app


  tests:
    build:
      context: .
      target: tests
    environment:
      STARNAVI_AI_ID: ${STARNAVI_AI_ID}
      STARNAVI_DB_URL: ${STARNAVI_DB_URL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_BACKEND_URL: ${CELERY_BACKEND_URL}
    volumes:
      - ${CREDENTIALS_AI}:/app/service_account_key.json
    depends_on:
      - redis
    profiles:
      - tests
    command: pytest tests


volumes:
  pgdata:
